// Code generated by goctl. DO NOT EDIT!
// Source: user.proto

package userclient

import (
	"context"

	"go-im-user-server/rpc/types/user"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AuthUserReply   = user.AuthUserReply
	AuthUserReq     = user.AuthUserReq
	CreateUserReply = user.CreateUserReply
	CreateUserReq   = user.CreateUserReq
	IdReq           = user.IdReq
	LoginReply      = user.LoginReply
	LoginReq        = user.LoginReq
	Token           = user.Token
	UserInfoReply   = user.UserInfoReply

	User interface {
		GetUser(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*UserInfoReply, error)
		CreateUser(ctx context.Context, in *CreateUserReq, opts ...grpc.CallOption) (*CreateUserReply, error)
		Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginReply, error)
		AuthUser(ctx context.Context, in *AuthUserReq, opts ...grpc.CallOption) (*AuthUserReply, error)
	}

	defaultUser struct {
		cli zrpc.Client
	}
)

func NewUser(cli zrpc.Client) User {
	return &defaultUser{
		cli: cli,
	}
}

func (m *defaultUser) GetUser(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*UserInfoReply, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.GetUser(ctx, in, opts...)
}

func (m *defaultUser) CreateUser(ctx context.Context, in *CreateUserReq, opts ...grpc.CallOption) (*CreateUserReply, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.CreateUser(ctx, in, opts...)
}

func (m *defaultUser) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginReply, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.Login(ctx, in, opts...)
}

func (m *defaultUser) AuthUser(ctx context.Context, in *AuthUserReq, opts ...grpc.CallOption) (*AuthUserReply, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.AuthUser(ctx, in, opts...)
}
