syntax = "proto3";

package user_server;

option go_package = "./user_server";

message IdReq{
  int64 id = 1;
}

message UserInfoReply{
  int64 id = 1;
  string name = 2;
  string number = 3;
  string gender = 4;
  string phone = 5;
  int64 age = 6;
}

message IdsReq{
  repeated int64 ids = 1;
}

message UserInfosReply{
  map<int64,UserInfoReply> userMap =1;
}


message CreateUserReq{
  string name = 1;
  string number = 2;
  string gender = 3;
  string phone = 4;
  int64  age = 5;
  string password = 6;
}


message CreateUserReply{
  int64 id = 1;
  Token token=2;
}


message loginReq{
  string phone = 1;
  string password = 2;
}


message loginReply{
  int64 id = 1;
  Token token=2;
}

message Token{
  string accessToken = 1;
  int64	accessExpire =2;
  int64	refreshAfter =3;
}

message authUserReq{
  int64 id = 1;
  string accessToken = 2;
  string deviceToken =3;
}


message authUserReply{
  string accessToken = 1;
  string deviceToken =2;  //标识用户唯一 用户ID userID:platform:deviceID
}

message getDeviceTokensByUserIDReq{
   repeated int64 ids = 1;
}

message getDeviceTokensByUserIDReply{
  map<int64,ListDeviceToken> userDeviceTokens =1;
}


message ListDeviceToken {
  repeated string values = 1;
}


service user {
  rpc getUser(IdReq) returns(UserInfoReply);
  rpc getUsers(IdReq) returns(UserInfoReply);
  rpc createUser(CreateUserReq) returns(CreateUserReply);
  rpc login(loginReq) returns(loginReply);
  rpc authUser(authUserReq) returns(authUserReply);
  rpc getDeviceTokensByUserID(getDeviceTokensByUserIDReq) returns(getDeviceTokensByUserIDReply);
}
